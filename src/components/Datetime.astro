---
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
import IconCalendar from "@/assets/icons/IconCalendar.svg";
import IconEdit from "@/assets/icons/IconEdit.svg";
import { SITE } from "@/config";

dayjs.extend(utc);
dayjs.extend(timezone);

export interface Props {
  class?: string;
  size?: "sm" | "lg";
  timezone: string | undefined;
  pubDatetime: string | Date;
  modDatetime: string | Date | undefined | null;
}

const {
  pubDatetime,
  modDatetime,
  size = "sm",
  class: className = "",
  timezone: postTimezone,
} = Astro.props;

/* ========== Formatted Datetime ========== */
const pubDate = dayjs(pubDatetime)
  .tz(postTimezone || SITE.timezone)
  .format("YYYY-MM-DD"); // e.g., '2024-11-03'
const modDate =
  modDatetime && modDatetime > pubDatetime
    ? dayjs(modDatetime)
        .tz(postTimezone || SITE.timezone)
        .format("YYYY-MM-DD")
    : null;
---

<div class:list={["flex items-end space-x-2 opacity-80", className]}>
  <span class:list={["text-sm italic", { "sm:text-base": size === "lg" }]}>
    <IconCalendar class="inline-block size-4" />
    <time datetime={dayjs(pubDatetime).toISOString()}>{pubDate}</time>
    {modDate && (
      <IconEdit class="inline-block size-4" />
      <span>
        {modDate}
      </span>
    )}
  </span>
</div>
